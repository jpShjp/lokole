{"version":3,"sources":["Button.js","Settings.js","Header.js","ErrorNotification.js","Grid.js","ClientStats.js","PingStats.js","App.js","index.js"],"names":["Button","props","type","icon","onClick","githubApi","axios","create","baseURL","formatSeconds","value","parseSeconds","replace","colors","SettingsForm","_validateGithubAccessToken","_rule","callback","a","form","setFieldsValue","githubUsername","undefined","githubAvatarUrl","get","headers","Authorization","response","data","message","login","avatar_url","handleSubmit","e","onChange","preventDefault","validateFields","err","values","updatedAt","Date","this","initialValue","serverEndpoint","githubAccessToken","pingIntervalSeconds","onSubmit","Item","label","getFieldDecorator","rules","required","prefix","style","color","placeholder","validator","Password","display","readOnly","hidden","width","formatter","parser","min","max","htmlType","React","Component","name","Header","state","isSettingsVisible","_onOpenSettings","setState","_onCloseSettings","onChangeSettings","settings","settingsForm","Settings","Fragment","title","avatar","src","extra","key","visible","onClose","PureComponent","ErrorNotification","description","exception","detail","notification","error","Grid","grid","gutter","xs","md","lg","itemLayout","ClientCard","isDeleting","isFetchingPendingEmails","numPendingEmails","isFetchingNumberOfUsers","numUsers","_onClickDelete","domain","onDelete","_onClickFetchPendingEmails","fetchNumPendingEmails","_onClickFetchNumberOfUsers","fetchNumUsers","actions","cancelText","okText","onConfirm","disabled","textDecoration","ClientStats","clients","isLoading","_fetchClients","_client","sort","_deleteClient","delete","then","_fetchNumPendingEmails","pending_emails","_fetchNumUsers","users","_renderListItem","_isEnabled","loading","dataSource","renderItem","PingStat","pingTimeMillis","pingSuccess","_pingInterval","_onPing","pingStart","getTime","setInterval","clearInterval","suffix","valueStyle","PingStats","defaultSettings","App","JSON","parse","localStorage","getItem","_onChangeSettings","setItem","stringify","minHeight","Content","padding","ReactDOM","render","document","getElementById"],"mappings":"sVAaeA,MATf,SAAgBC,GACd,OAAO,uBAAMC,KAAMD,EAAME,KAAMC,QAASH,EAAMG,W,8GCD1CC,EAAYC,IAAMC,OAAO,CAAEC,QAAS,2BAEpCC,EAAgB,SAAAC,GAAK,gBAAOA,EAAP,aACrBC,EAAe,SAAAD,GAAK,OAAIA,EAAME,QAAQ,UAAW,KAEjDC,EACE,qBAGFC,E,2MACJC,2B,uCAA6B,WAAOC,EAAON,EAAOO,GAArB,iBAAAC,EAAA,yDACnBC,EAAS,EAAKlB,MAAdkB,KAEHT,EAHsB,uBAIzBS,EAAKC,eACH,CACEC,oBAAgBC,EAChBC,qBAAiBD,GAEnBL,GATuB,mDAgBRZ,EAAUmB,IAAI,QAAS,CACtCC,QAAS,CAAEC,cAAc,SAAD,OAAWhB,MAjBZ,OAgBzBiB,EAhByB,gEAoBzBV,EAAS,KAAMU,SAASC,KAAKC,SApBJ,2BAwB3BV,EAAKC,eACH,CACEC,eAAgBM,EAASC,KAAKE,MAC9BP,gBAAiBI,EAASC,KAAKG,YAEjCd,GA7ByB,0D,4DAiC7Be,aAAe,SAAAC,GAAM,IAAD,EACS,EAAKhC,MAAxBkB,EADU,EACVA,KAAMe,EADI,EACJA,SAEdD,EAAEE,iBAEFhB,EAAKiB,gBAAe,SAACC,EAAKC,GACnBD,GACHH,EAAS,eAAKI,EAAN,CAAcC,UAAU,GAAD,OAAK,IAAIC,a,wEAKpC,IACArB,EAASsB,KAAKxC,MAAdkB,KADD,EASHsB,KAAKxC,MAAMyC,aALbC,EAJK,EAILA,eACAC,EALK,EAKLA,kBACAvB,EANK,EAMLA,eACAE,EAPK,EAOLA,gBACAsB,EARK,EAQLA,oBAGF,OACE,uBAAMC,SAAUL,KAAKT,cACnB,sBAAMe,KAAN,CAAWC,MAAM,mBACd7B,EAAK8B,kBAAkB,iBAAkB,CACxCC,MAAO,CACL,CACEC,UAAU,EACVtB,QAAS,uDAGba,aAAcC,GAPfxB,CASC,uBACEiC,OAAQ,uBAAMlD,KAAK,MAAMmD,MAAO,CAAEC,MAAOzC,KACzC0C,YAAY,4BAIlB,sBAAMR,KAAN,CAAWC,MAAM,uBACd7B,EAAK8B,kBAAkB,oBAAqB,CAC3CC,MAAO,CAAC,CAAEM,UAAWf,KAAK1B,6BAC1B2B,aAAcE,GAFfzB,CAIC,sBAAOsC,SAAP,CACEL,OAAQ,uBAAMlD,KAAK,SAASmD,MAAO,CAAEC,MAAOzC,KAC5C0C,YAAY,sBAIlB,sBAAMR,KAAN,CAAWM,MAAO,CAAEK,QAAS,SAC1BvC,EAAK8B,kBAAkB,iBAAkB,CACxCP,aAAcrB,GADfF,CAEE,uBAAOwC,UAAQ,EAACC,QAAM,MAE3B,sBAAMb,KAAN,CAAWM,MAAO,CAAEK,QAAS,SAC1BvC,EAAK8B,kBAAkB,kBAAmB,CACzCP,aAAcnB,GADfJ,CAEE,uBAAOwC,UAAQ,EAACC,QAAM,MAE3B,sBAAMb,KAAN,CAAWC,MAAM,iBACd7B,EAAK8B,kBAAkB,sBAAuB,CAC7CC,MAAO,CACL,CACEC,UAAU,EACVtB,QAAS,8CAGba,aAAcG,GAPf1B,CASC,uBACEkC,MAAO,CAAEQ,MAAO,QAChBN,YAAY,aACZO,UAAWrD,EACXsD,OAAQpD,EACRqD,IAAK,EACLC,IAAK,OAIX,sBAAMlB,KAAN,KACE,uBAAQ7C,KAAK,UAAUgE,SAAS,UAAhC,uB,GArHiBC,IAAMC,WA8HlB,MAAK7D,OAAO,CAAE8D,KAAM,YAApB,CAAkCvD,GCjFlCwD,E,2MAnDbC,MAAQ,CACNC,mBAAmB,G,EAGrBC,gBAAkB,kBAAM,EAAKC,SAAS,CAAEF,mBAAmB,K,EAE3DG,iBAAmB,kBAAM,EAAKD,SAAS,CAAEF,mBAAmB,K,wEAElD,IACAA,EAAsB/B,KAAK8B,MAA3BC,kBADD,EAEgC/B,KAAKxC,MAApC2E,EAFD,EAECA,iBAAkBC,EAFnB,EAEmBA,SAEpBC,EAEJ,kBAACC,EAAD,CAAUrC,aAAcmC,EAAU3C,SAAU0C,IAG9C,OACE,kBAAC,IAAMI,SAAP,KACE,uBACEC,MAAM,0BACNC,OAC8B,MAA5BL,EAAStD,gBACL,CAAE4D,IAAKN,EAAStD,iBAChB,CAAEpB,KAAM,QAEdiF,MAAO,CACL,kBAAC,EAAD,CACEhF,QAASqC,KAAKgC,gBACdtE,KAAK,UACLkF,IAAI,eAIV,uBACEJ,MAAM,WACNK,QAASd,EACTe,QAAS9C,KAAKkC,kBAEbG,Q,GAxCUX,IAAMqB,e,uFCWZC,MAff,YAAoD,IAC9CC,EADuB7D,EAAsB,EAAtBA,QAAS8D,EAAa,EAAbA,UAIlCD,EADEC,EAAUhE,UAAYgE,EAAUhE,SAASC,KAEN,kBAA5B+D,EAAUhE,SAASC,KACtB+D,EAAUhE,SAASC,KACnB+D,EAAUhE,SAASC,KAAKgE,OAEhBD,EAAU9D,QAG1BgE,EAAA,EAAaC,MAAM,CAAEjE,UAAS6D,iBCDjBK,MAVf,SAAc9F,GACZ,OACE,qCACE+F,KAAM,CAAEC,OAAQ,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACtCC,WAAW,YACPpG,KCAJqG,E,2MACJ/B,MAAQ,CACNgC,YAAY,EACZC,yBAAyB,EACzBC,iBAAkB,KAClBC,yBAAyB,EACzBC,SAAU,M,EAGZC,e,sBAAiB,gCAAA1F,EAAA,2DACc,EAAKjB,MAA1B4G,EADO,EACPA,OAAQC,EADD,EACCA,UACO,EAAKvC,MAApBgC,WAFO,wDAQf,EAAK7B,SAAS,CAAE6B,YAAY,IARb,SASTO,EAASD,GATA,OAUf,EAAKnC,SAAS,CAAE6B,YAAY,IAVb,2C,EAajBQ,2B,sBAA6B,kCAAA7F,EAAA,2DACe,EAAKjB,MAAvC4G,EADmB,EACnBA,OAAQG,EADW,EACXA,uBACoB,EAAKzC,MAAjCiC,wBAFmB,wDAQ3B,EAAK9B,SAAS,CAAE8B,yBAAyB,IARd,SASIQ,EAAsBH,GAT1B,OASrBJ,EATqB,OAU3B,EAAK/B,SAAS,CAAE8B,yBAAyB,EAAOC,qBAVrB,2C,EAa7BQ,2B,sBAA6B,kCAAA/F,EAAA,2DACO,EAAKjB,MAA/B4G,EADmB,EACnBA,OAAQK,EADW,EACXA,eACoB,EAAK3C,MAAjCmC,wBAFmB,wDAQ3B,EAAKhC,SAAS,CAAEgC,yBAAyB,IARd,SASJQ,EAAcL,GATV,OASrBF,EATqB,OAU3B,EAAKjC,SAAS,CAAEgC,yBAAyB,EAAOC,aAVrB,2C,wEAanB,IACAE,EAAWpE,KAAKxC,MAAhB4G,OADD,EASHpE,KAAK8B,MALPgC,EAJK,EAILA,WACAC,EALK,EAKLA,wBACAC,EANK,EAMLA,iBACAC,EAPK,EAOLA,wBACAC,EARK,EAQLA,SAGF,OACE,uBACEQ,QAAS,CACP,uBACElC,MACE,yDAC0B,4BAAK4B,GAD/B,IAEE,6BAFF,iBAMFO,WAAW,cACXC,OAAO,eACPC,UAAW7E,KAAKmE,eAChBW,SAAUhB,GAEV,kBAAC,EAAD,CAAQpG,KAAMoG,EAAa,UAAY,YAEzC,6BACE,kBAAC,EAAD,CACEpG,KAAMqG,EAA0B,UAAY,OAC5CpG,QAASqC,KAAKsE,6BAEgB,MAA/BtE,KAAK8B,MAAMkC,kBACV,qCAAaA,IAGjB,6BACE,kBAAC,EAAD,CACEtG,KAAMuG,EAA0B,UAAY,OAC5CtG,QAASqC,KAAKwE,6BAEQ,MAAvBxE,KAAK8B,MAAMoC,UAAoB,qCAAaA,KAGjDtD,MAAO,CACLmE,eAAgBjB,EAAa,oBAAiBjF,IAG/CuF,O,GAlGgB1C,IAAMC,WAgPhBqD,E,2MAjIblD,MAAQ,CACNmD,QAAS,GACTC,WAAW,G,EAoBbC,c,sBAAgB,8BAAA1G,EAAA,6DACRwG,EAAY,EAAKnD,MAAjBmD,QADQ,kBAIW,EAAKG,QAAQrG,IAAI,wBAJ5B,OAING,EAJM,OAKZ+F,EAAU/F,EAASC,KAAK8F,QAAQI,OALpB,gDAOZrC,EAAkB,CAChB5D,QAAS,0BACT8D,UAAS,OATC,QAad,EAAKjB,SAAS,CACZgD,UACAC,WAAW,IAfC,yD,EAmBhBI,c,uCAAgB,WAAMlB,GAAN,SAAA3F,EAAA,+EAEN,EAAK2G,QACRG,OADG,8BAC2BnB,IAC9BoB,KAAK,EAAKL,eAJD,sDAMZnC,EAAkB,CAChB5D,QAAQ,2BAAD,OAA6BgF,GACpClB,UAAS,OARC,wD,wDAahBuC,uB,uCAAyB,WAAMrB,GAAN,eAAA3F,EAAA,+EAEE,EAAK2G,QAAQrG,IAAb,qCACSqF,IAHX,cAEflF,EAFe,yBAKdA,EAASC,KAAKuG,gBALA,uCAOrB1C,EAAkB,CAChB5D,QAAQ,6CAAD,OAA+CgF,GACtDlB,UAAS,OATU,kBAWd,MAXc,yD,wDAezByC,e,uCAAiB,WAAMvB,GAAN,eAAA3F,EAAA,+EAEU,EAAK2G,QAAQrG,IAAb,mCACOqF,IAHjB,cAEPlF,EAFO,yBAKNA,EAASC,KAAKyG,OALR,uCAOb5C,EAAkB,CAChB5D,QAAQ,8CAAD,OAAgDgF,GACvDlB,UAAS,OATE,kBAWN,MAXM,yD,wDAejB2C,gBAAkB,YAAiB,IAAdzB,EAAa,EAAbA,OACnB,OACE,sBAAM9D,KAAN,CAAWsC,IAAKwB,GACd,kBAAC,EAAD,CACEA,OAAQA,EACRC,SAAU,EAAKiB,cACff,sBAAuB,EAAKkB,uBAC5BhB,cAAe,EAAKkB,mB,mFAOtB3F,KAAK8F,YACP9F,KAAKmF,kB,+BAIC,IAAD,EACwBnF,KAAK8B,MAA5BoD,EADD,EACCA,UAAWD,EADZ,EACYA,QAEnB,OAAKjF,KAAK8F,WAOR,kBAAC,EAAD,CACEC,QAASb,EACTc,WAAYf,EACZgB,WAAYjG,KAAK6F,kBARjB,uBAAO5C,YAAY,2D,8BAvGV,IAAD,EACkCjD,KAAKxC,MAAM4E,SAAjDlC,EADI,EACJA,eAAgBC,EADZ,EACYA,kBAExB,OAAOtC,IAAMC,OAAO,CAClBC,QAASmC,EACTlB,QAAS,CACPC,cAAc,UAAD,OAAYkB,Q,iCAQ7B,OAF8BH,KAAKxC,MAAM4E,SAAjCjC,sB,GAlBcuB,IAAMC,W,kBC/G1BvD,EACK,UADLA,EAEK,UAGL8H,E,2MACJpE,MAAQ,CACNqE,oBAAgBtH,EAChBuH,iBAAavH,G,EAGfwH,mBAAgBxH,E,EAEhByH,Q,sBAAU,gCAAA7H,EAAA,6DACAyB,EAAmB,EAAK1C,MAAxB0C,eAEFqG,GAAY,IAAIxG,MAAOyG,UAHrB,kBAOA3I,IAAMkB,IAAImB,GAPV,OAQNkG,GAAc,EARR,gDAUNpD,EAAkB,CAChB5D,QAAS,wBACT8D,UAAS,OAEXkD,GAAc,EAdR,QAiBR,EAAKnE,SAAS,CACZkE,gBAAgB,IAAIpG,MAAOyG,UAAYD,EACvCH,gBAnBM,yD,0MAwBAhG,EAAwBJ,KAAKxC,MAA7B4C,oB,SAEFJ,KAAKsG,U,OAEXtG,KAAKqG,cAAgBI,YAAYzG,KAAKsG,QAA+B,IAAtBlG,G,mJAIrB,MAAtBJ,KAAKqG,eACPK,cAAc1G,KAAKqG,iB,+BAIb,IACA7D,EAAUxC,KAAKxC,MAAfgF,MADD,EAEiCxC,KAAK8B,MAArCsE,EAFD,EAECA,YAAaD,EAFd,EAEcA,eAErB,OACE,sBAAM7F,KAAN,CAAWsC,IAAKJ,GACd,2BACE,uBACEA,MAAOA,EACPvE,MAAOkI,EACPQ,OAAO,KACPhG,OAAQ,uBAAMlD,KAAM2I,EAAc,QAAU,YAC5CQ,WAAY,CACV/F,MAAOuF,EAAchI,EAAiBA,W,GA1D7BsD,IAAMC,WAmGdkF,MA1Bf,SAAmBrJ,GAAQ,IAAD,EACwBA,EAAM4E,SAA9ClC,EADgB,EAChBA,eAAgBE,EADA,EACAA,oBAExB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEoC,MAAM,cACNpC,oBAAqBA,EACrBF,eAAc,UAAKA,EAAL,uBAEhB,kBAAC,EAAD,CACEsC,MAAM,cACNpC,oBAAqBA,EACrBF,eAAc,UAAKA,EAAL,6BC1FhB4G,EAAkB,CACtB1G,oBAAqB,EACrBD,uBAAmBtB,EACnBD,oBAAgBC,EAChBqB,eAAgB,gCA4CH6G,E,2MAxCbjF,MAAQ,CACNM,SAAS,eACJ0E,EADG,GAEHE,KAAKC,MAAMC,aAAaC,QAbT,aAaqC,Q,EAI3DC,kBAAoB,SAAAhF,GAClB8E,aAAaG,QAlBO,WAkBkBL,KAAKM,UAAUlF,IACrD,EAAKH,SAAS,CAAEG,c,wEAGR,IACAA,EAAapC,KAAK8B,MAAlBM,SAER,OACE,kBAAC,IAAMG,SAAP,KACE,uBAAQ3B,MAAO,CAAE2G,UAAW,UAC1B,kBAAC,EAAD,CACEnF,SAAUA,EACVD,iBAAkBnC,KAAKoH,oBAEzB,sBAAQI,QAAR,CAAgB5G,MAAO,CAAE6G,QAAS,WAChC,oCACA,kBAAC,EAAD,CACErF,SAAUA,EACVQ,IAAG,gBAAWR,EAAStC,aAEzB,sCACA,kBAAC,EAAD,CACEsC,SAAUA,EACVQ,IAAG,kBAAaR,EAAStC,oB,GAhCrB4B,IAAMC,WCXxB+F,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8dff751d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'antd';\n\nfunction Button(props) {\n  return <Icon type={props.icon} onClick={props.onClick} />;\n}\n\nButton.propTypes = {\n  icon: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import React from 'react';\nimport { Button, Form, Icon, Input, InputNumber } from 'antd';\nimport axios from 'axios';\n\nconst githubApi = axios.create({ baseURL: 'https://api.github.com' });\n\nconst formatSeconds = value => `${value} seconds`;\nconst parseSeconds = value => value.replace(/[^0-9]/g, '');\n\nconst colors = {\n  icon: 'rgba(0, 0, 0, .25)',\n};\n\nclass SettingsForm extends React.Component {\n  _validateGithubAccessToken = async (_rule, value, callback) => {\n    const { form } = this.props;\n\n    if (!value) {\n      form.setFieldsValue(\n        {\n          githubUsername: undefined,\n          githubAvatarUrl: undefined,\n        },\n        callback\n      );\n      return;\n    }\n\n    let response;\n    try {\n      response = await githubApi.get('/user', {\n        headers: { Authorization: `Token ${value}` },\n      });\n    } catch (error) {\n      callback(error.response.data.message);\n      return;\n    }\n\n    form.setFieldsValue(\n      {\n        githubUsername: response.data.login,\n        githubAvatarUrl: response.data.avatar_url,\n      },\n      callback\n    );\n  };\n\n  handleSubmit = e => {\n    const { form, onChange } = this.props;\n\n    e.preventDefault();\n\n    form.validateFields((err, values) => {\n      if (!err) {\n        onChange({ ...values, updatedAt: `${new Date()}` });\n      }\n    });\n  };\n\n  render() {\n    const { form } = this.props;\n\n    const {\n      serverEndpoint,\n      githubAccessToken,\n      githubUsername,\n      githubAvatarUrl,\n      pingIntervalSeconds,\n    } = this.props.initialValue;\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Item label=\"Server endpoint\">\n          {form.getFieldDecorator('serverEndpoint', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input the endpoint URL of the Lokole server',\n              },\n            ],\n            initialValue: serverEndpoint,\n          })(\n            <Input\n              prefix={<Icon type=\"api\" style={{ color: colors.icon }} />}\n              placeholder=\"http://localhost:8080\"\n            />\n          )}\n        </Form.Item>\n        <Form.Item label=\"Github access token\">\n          {form.getFieldDecorator('githubAccessToken', {\n            rules: [{ validator: this._validateGithubAccessToken }],\n            initialValue: githubAccessToken,\n          })(\n            <Input.Password\n              prefix={<Icon type=\"github\" style={{ color: colors.icon }} />}\n              placeholder=\"1234567abcdefgh\"\n            />\n          )}\n        </Form.Item>\n        <Form.Item style={{ display: 'none' }}>\n          {form.getFieldDecorator('githubUsername', {\n            initialValue: githubUsername,\n          })(<Input readOnly hidden />)}\n        </Form.Item>\n        <Form.Item style={{ display: 'none' }}>\n          {form.getFieldDecorator('githubAvatarUrl', {\n            initialValue: githubAvatarUrl,\n          })(<Input readOnly hidden />)}\n        </Form.Item>\n        <Form.Item label=\"Ping interval\">\n          {form.getFieldDecorator('pingIntervalSeconds', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input the ping interval in seconds',\n              },\n            ],\n            initialValue: pingIntervalSeconds,\n          })(\n            <InputNumber\n              style={{ width: '100%' }}\n              placeholder=\"10 seconds\"\n              formatter={formatSeconds}\n              parser={parseSeconds}\n              min={1}\n              max={60}\n            />\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Save settings\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport default Form.create({ name: 'settings' })(SettingsForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer, PageHeader } from 'antd';\nimport Button from './Button';\nimport Settings from './Settings';\n\nclass Header extends React.PureComponent {\n  state = {\n    isSettingsVisible: false,\n  };\n\n  _onOpenSettings = () => this.setState({ isSettingsVisible: true });\n\n  _onCloseSettings = () => this.setState({ isSettingsVisible: false });\n\n  render() {\n    const { isSettingsVisible } = this.state;\n    const { onChangeSettings, settings } = this.props;\n\n    const settingsForm = (\n      // @ts-ignore\n      <Settings initialValue={settings} onChange={onChangeSettings} />\n    );\n\n    return (\n      <React.Fragment>\n        <PageHeader\n          title=\"Lokole Status Dashboard\"\n          avatar={\n            settings.githubAvatarUrl != null\n              ? { src: settings.githubAvatarUrl }\n              : { icon: 'user' }\n          }\n          extra={[\n            <Button\n              onClick={this._onOpenSettings}\n              icon=\"setting\"\n              key=\"setting\"\n            />,\n          ]}\n        />\n        <Drawer\n          title=\"Settings\"\n          visible={isSettingsVisible}\n          onClose={this._onCloseSettings}\n        >\n          {settingsForm}\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\n\nHeader.propTypes = {\n  onChangeSettings: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired,\n};\n\nexport default Header;\n","import { notification } from 'antd';\n\nfunction ErrorNotification({ message, exception }) {\n  let description;\n\n  if (exception.response && exception.response.data) {\n    description =\n      typeof exception.response.data === 'string'\n        ? exception.response.data\n        : exception.response.data.detail;\n  } else {\n    description = exception.message;\n  }\n\n  notification.error({ message, description });\n}\n\nexport default ErrorNotification;\n","import React from 'react';\nimport { List } from 'antd';\n\nfunction Grid(props) {\n  return (\n    <List\n      grid={{ gutter: 16, xs: 1, md: 4, lg: 6 }}\n      itemLayout=\"vertical\"\n      {...props}\n    />\n  );\n}\n\nexport default Grid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Empty, List, Popconfirm } from 'antd';\nimport axios from 'axios';\nimport Button from './Button';\nimport ErrorNotification from './ErrorNotification';\nimport Grid from './Grid';\n\nclass ClientCard extends React.Component {\n  state = {\n    isDeleting: false,\n    isFetchingPendingEmails: false,\n    numPendingEmails: null,\n    isFetchingNumberOfUsers: false,\n    numUsers: null,\n  };\n\n  _onClickDelete = async () => {\n    const { domain, onDelete } = this.props;\n    const { isDeleting } = this.state;\n\n    if (isDeleting) {\n      return;\n    }\n\n    this.setState({ isDeleting: true });\n    await onDelete(domain);\n    this.setState({ isDeleting: false });\n  };\n\n  _onClickFetchPendingEmails = async () => {\n    const { domain, fetchNumPendingEmails } = this.props;\n    const { isFetchingPendingEmails } = this.state;\n\n    if (isFetchingPendingEmails) {\n      return;\n    }\n\n    this.setState({ isFetchingPendingEmails: true });\n    const numPendingEmails = await fetchNumPendingEmails(domain);\n    this.setState({ isFetchingPendingEmails: false, numPendingEmails });\n  };\n\n  _onClickFetchNumberOfUsers = async () => {\n    const { domain, fetchNumUsers } = this.props;\n    const { isFetchingNumberOfUsers } = this.state;\n\n    if (isFetchingNumberOfUsers) {\n      return;\n    }\n\n    this.setState({ isFetchingNumberOfUsers: true });\n    const numUsers = await fetchNumUsers(domain);\n    this.setState({ isFetchingNumberOfUsers: false, numUsers });\n  };\n\n  render() {\n    const { domain } = this.props;\n\n    const {\n      isDeleting,\n      isFetchingPendingEmails,\n      numPendingEmails,\n      isFetchingNumberOfUsers,\n      numUsers,\n    } = this.state;\n\n    return (\n      <Card\n        actions={[\n          <Popconfirm\n            title={\n              <span>\n                This will delete client <em>{domain}</em>.\n                <br />\n                Are you sure?\n              </span>\n            }\n            cancelText=\"No, cancel.\"\n            okText=\"Yes, delete!\"\n            onConfirm={this._onClickDelete}\n            disabled={isDeleting}\n          >\n            <Button icon={isDeleting ? 'loading' : 'delete'} />\n          </Popconfirm>,\n          <div>\n            <Button\n              icon={isFetchingPendingEmails ? 'loading' : 'mail'}\n              onClick={this._onClickFetchPendingEmails}\n            />\n            {this.state.numPendingEmails != null && (\n              <span>&nbsp;{numPendingEmails}</span>\n            )}\n          </div>,\n          <div>\n            <Button\n              icon={isFetchingNumberOfUsers ? 'loading' : 'user'}\n              onClick={this._onClickFetchNumberOfUsers}\n            />\n            {this.state.numUsers != null && <span>&nbsp;{numUsers}</span>}\n          </div>,\n        ]}\n        style={{\n          textDecoration: isDeleting ? 'line-through' : undefined,\n        }}\n      >\n        {domain}\n      </Card>\n    );\n  }\n}\n\nClientCard.propTypes = {\n  domain: PropTypes.string.isRequired,\n  fetchNumPendingEmails: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nclass ClientStats extends React.Component {\n  state = {\n    clients: [],\n    isLoading: true,\n  };\n\n  get _client() {\n    const { serverEndpoint, githubAccessToken } = this.props.settings;\n\n    return axios.create({\n      baseURL: serverEndpoint,\n      headers: {\n        Authorization: `Bearer ${githubAccessToken}`,\n      },\n    });\n  }\n\n  get _isEnabled() {\n    const { githubAccessToken } = this.props.settings;\n\n    return githubAccessToken;\n  }\n\n  _fetchClients = async () => {\n    let { clients } = this.state;\n\n    try {\n      const response = await this._client.get('/api/email/register/');\n      clients = response.data.clients.sort();\n    } catch (exception) {\n      ErrorNotification({\n        message: 'Unable to fetch clients',\n        exception,\n      });\n    }\n\n    this.setState({\n      clients,\n      isLoading: false,\n    });\n  };\n\n  _deleteClient = async domain => {\n    try {\n      await this._client\n        .delete(`/api/email/register/${domain}`)\n        .then(this._fetchClients);\n    } catch (exception) {\n      ErrorNotification({\n        message: `Unable to delete client ${domain}`,\n        exception,\n      });\n    }\n  };\n\n  _fetchNumPendingEmails = async domain => {\n    try {\n      const response = await this._client.get(\n        `/api/email/metrics/pending/${domain}`\n      );\n      return response.data.pending_emails;\n    } catch (exception) {\n      ErrorNotification({\n        message: `Unable to fetch pending emails for client ${domain}`,\n        exception,\n      });\n      return null;\n    }\n  };\n\n  _fetchNumUsers = async domain => {\n    try {\n      const response = await this._client.get(\n        `/api/email/metrics/users/${domain}`\n      );\n      return response.data.users;\n    } catch (exception) {\n      ErrorNotification({\n        message: `Unable to fetch number of users for client ${domain}`,\n        exception,\n      });\n      return null;\n    }\n  };\n\n  _renderListItem = ({ domain }) => {\n    return (\n      <List.Item key={domain}>\n        <ClientCard\n          domain={domain}\n          onDelete={this._deleteClient}\n          fetchNumPendingEmails={this._fetchNumPendingEmails}\n          fetchNumUsers={this._fetchNumUsers}\n        />\n      </List.Item>\n    );\n  };\n\n  componentDidMount() {\n    if (this._isEnabled) {\n      this._fetchClients();\n    }\n  }\n\n  render() {\n    const { isLoading, clients } = this.state;\n\n    if (!this._isEnabled) {\n      return (\n        <Empty description=\"Add Github access token in settings to view clients.\" />\n      );\n    }\n\n    return (\n      <Grid\n        loading={isLoading}\n        dataSource={clients}\n        renderItem={this._renderListItem}\n      />\n    );\n  }\n}\n\nClientStats.propTypes = {\n  settings: PropTypes.shape({\n    githubAccessToken: PropTypes.string,\n    serverEndpoint: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ClientStats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Icon, List, Statistic } from 'antd';\nimport axios from 'axios';\nimport ErrorNotification from './ErrorNotification';\nimport Grid from './Grid';\n\nconst colors = {\n  success: '#3f8600',\n  failure: '#cf1322',\n};\n\nclass PingStat extends React.Component {\n  state = {\n    pingTimeMillis: undefined,\n    pingSuccess: undefined,\n  };\n\n  _pingInterval = undefined;\n\n  _onPing = async () => {\n    const { serverEndpoint } = this.props;\n\n    const pingStart = new Date().getTime();\n\n    let pingSuccess;\n    try {\n      await axios.get(serverEndpoint);\n      pingSuccess = true;\n    } catch (exception) {\n      ErrorNotification({\n        message: 'Unable to ping server',\n        exception,\n      });\n      pingSuccess = false;\n    }\n\n    this.setState({\n      pingTimeMillis: new Date().getTime() - pingStart,\n      pingSuccess,\n    });\n  };\n\n  async componentDidMount() {\n    const { pingIntervalSeconds } = this.props;\n\n    await this._onPing();\n\n    this._pingInterval = setInterval(this._onPing, pingIntervalSeconds * 1000);\n  }\n\n  componentWillUnmount() {\n    if (this._pingInterval != null) {\n      clearInterval(this._pingInterval);\n    }\n  }\n\n  render() {\n    const { title } = this.props;\n    const { pingSuccess, pingTimeMillis } = this.state;\n\n    return (\n      <List.Item key={title}>\n        <Card>\n          <Statistic\n            title={title}\n            value={pingTimeMillis}\n            suffix=\"ms\"\n            prefix={<Icon type={pingSuccess ? 'check' : 'warning'} />}\n            valueStyle={{\n              color: pingSuccess ? colors.success : colors.failure,\n            }}\n          />\n        </Card>\n      </List.Item>\n    );\n  }\n}\n\nPingStat.propTypes = {\n  title: PropTypes.string.isRequired,\n  serverEndpoint: PropTypes.string.isRequired,\n  pingIntervalSeconds: PropTypes.number.isRequired,\n};\n\nfunction PingStats(props) {\n  const { serverEndpoint, pingIntervalSeconds } = props.settings;\n\n  return (\n    <Grid>\n      <PingStat\n        title=\"Server ping\"\n        pingIntervalSeconds={pingIntervalSeconds}\n        serverEndpoint={`${serverEndpoint}/healthcheck/ping`}\n      />\n      <PingStat\n        title=\"Webapp ping\"\n        pingIntervalSeconds={pingIntervalSeconds}\n        serverEndpoint={`${serverEndpoint}/web/healthcheck/ping`}\n      />\n    </Grid>\n  );\n}\n\nPingStats.propTypes = {\n  settings: PropTypes.shape({\n    pingIntervalSeconds: PropTypes.number.isRequired,\n    serverEndpoint: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default PingStats;\n","import React from 'react';\nimport { Divider, Layout } from 'antd';\nimport Header from './Header';\nimport ClientStats from './ClientStats';\nimport PingStats from './PingStats';\n\nconst localStorageKey = 'settings';\n\nconst defaultSettings = {\n  pingIntervalSeconds: 5,\n  githubAccessToken: undefined,\n  githubUsername: undefined,\n  serverEndpoint: 'https://mailserver.lokole.ca',\n};\n\nclass App extends React.Component {\n  state = {\n    settings: {\n      ...defaultSettings,\n      ...JSON.parse(localStorage.getItem(localStorageKey) || '{}'),\n    },\n  };\n\n  _onChangeSettings = settings => {\n    localStorage.setItem(localStorageKey, JSON.stringify(settings));\n    this.setState({ settings });\n  };\n\n  render() {\n    const { settings } = this.state;\n\n    return (\n      <React.Fragment>\n        <Layout style={{ minHeight: '100vh' }}>\n          <Header\n            settings={settings}\n            onChangeSettings={this._onChangeSettings}\n          />\n          <Layout.Content style={{ padding: '0 50px' }}>\n            <Divider>Stats</Divider>\n            <PingStats\n              settings={settings}\n              key={`stats-${settings.updatedAt}`}\n            />\n            <Divider>Clients</Divider>\n            <ClientStats\n              settings={settings}\n              key={`clients-${settings.updatedAt}`}\n            />\n          </Layout.Content>\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}